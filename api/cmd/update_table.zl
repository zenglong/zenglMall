inc 'common.zl';

// 该脚本会根据update.lock中记录的更新用的源版本号，以及配置文件中的当前代码版本号，对数据库表结构进行升级，从而让数据库的表结构能够和当前版本的代码相匹配
update_lock_file = 'update.lock';

ret = bltReadFile(update_lock_file, &update_version);

// 如果没有update.lock文件，则将更新的源版本号设置为0.1.0，表示从0.1.0版本开始进行更新升级
if(ret != 0)
	update_version = '0.1.0';
endif

// 如果更新的源版本号，和当前的代码版本号相同，则无需进行更新，给出相关提示后，直接退出脚本
if(bltVersionCompare(update_version, config['version']) == 0)
	print "update_version (" + update_version + ") == config['version'], no need to update";
	bltExit();
else
	print "update_version (" + update_version + ")";
endif

querys = rqtGetQuery();

// 如果更新的源版本号小于等于0.1.0的版本，则创建商品库存表，同时在orders订单表中增加pay_time即订单支付时间字段
if(bltVersionCompare(update_version, '0.1.0') <= 0)
	print "update from 0.1.0: ";
	// 创建商品库存表
	Mysql.Exec(db, "CREATE TABLE goods_store(
		id int NOT NULL AUTO_INCREMENT, 
		gid int NOT NULL DEFAULT '0' COMMENT '商品ID',
		num int NOT NULL DEFAULT '0' COMMENT '商品库存',
		PRIMARY KEY (id),
		KEY `gid` (`gid`)
		) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci COMMENT='商品库存表'");
	print 'create table goods_store';

	// orders表增加pay_time字段
	Mysql.Exec(db, "ALTER TABLE orders ADD COLUMN `pay_time` timestamp NULL DEFAULT NULL COMMENT '订单支付时间' AFTER `update_time`");
	print 'add column pay_time to orders table';

	// 可以通过store_num的命令行参数来设置商品库存表中每个商品的初始库存，如果没有在命令行中指定该参数的话，那么初始库存就是0
	store_num = bltInt(querys['store_num']);
	store_num = store_num < 0 ? 0 : store_num;
	print 'store_num: ' + store_num;
	// 初始化商品库存表
	Mysql.Exec(db, "INSERT INTO goods_store (gid, num) SELECT id," + store_num + " FROM goods");
	print 'init goods_store table';
	print '----------------------';
elif(bltVersionCompare(update_version, '0.2.0') <= 0)
	Mysql.Exec(db, "CREATE TABLE IF NOT EXISTS admin_opt_log (
	`id` int NOT NULL AUTO_INCREMENT, 
	`user` varchar(255) NOT NULL DEFAULT '' COMMENT '操作人', 
	`log` varchar(255) NOT NULL DEFAULT '' COMMENT '操作日志',
	`opt_time` datetime NULL DEFAULT NULL COMMENT '操作时间',
	PRIMARY KEY (`id`)
	) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci COMMENT='后台操作日志表'");
	print 'create table admin_opt_log';
	Mysql.Exec(db, "ALTER TABLE category ADD COLUMN `delete_time` datetime NULL DEFAULT NULL COMMENT '删除时间'");
	print 'add column delete_time to category table';
	Mysql.Exec(db, "ALTER TABLE goods ADD COLUMN `delete_time` datetime NULL DEFAULT NULL COMMENT '删除时间'");
	print 'add column delete_time to goods table';
elif(bltVersionCompare(update_version, '0.3.0') <= 0)
	// 创建商品属性表
	Mysql.Exec(db, "CREATE TABLE goods_attr(
		id int NOT NULL AUTO_INCREMENT,
		`name` varchar(80) NOT NULL DEFAULT '' COMMENT '属性名称',
		`created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
	 	`updated_at` datetime NULL DEFAULT NULL COMMENT '更新时间',
		`delete_time` datetime NULL DEFAULT NULL COMMENT '删除时间',
		PRIMARY KEY (id)
		) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci COMMENT='商品属性表'");
	print 'create table goods_attr';
	// 创建商品属性值表
	Mysql.Exec(db, "CREATE TABLE goods_attr_value(
		id int NOT NULL AUTO_INCREMENT,
		`aid` int NOT NULL DEFAULT '0' COMMENT '所属的属性的ID',
		`name` varchar(80) NOT NULL DEFAULT '' COMMENT '属性值名称',
		`created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
	 	`updated_at` datetime NULL DEFAULT NULL COMMENT '更新时间',
		`delete_time` datetime NULL DEFAULT NULL COMMENT '删除时间',
		PRIMARY KEY (id)
		) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci COMMENT='商品属性值表'");
	print 'create table goods_attr_value';
	// 创建商品规格表
	Mysql.Exec(db, "CREATE TABLE goods_sku(
		id int NOT NULL AUTO_INCREMENT, 
		name varchar(255) NOT NULL DEFAULT '' COMMENT '规格名称',
		thumbnail varchar(255) NOT NULL DEFAULT '' COMMENT '规格缩略图',
		price decimal(10,2) DEFAULT '0.00' COMMENT '规格价格',
		gid int NOT NULL DEFAULT '0' COMMENT '规格所属商品的ID', 
		num int NOT NULL DEFAULT '0' COMMENT '规格库存',
		`created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
	 	`updated_at` datetime NULL DEFAULT NULL COMMENT '更新时间',
		`delete_time` datetime NULL DEFAULT NULL COMMENT '删除时间',
		PRIMARY KEY (id)
		) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci COMMENT='商品规格表'");
	print 'create table goods_sku';
	// 创建商品规格属性表
	Mysql.Exec(db, "CREATE TABLE goods_sku_attr(
		id int NOT NULL AUTO_INCREMENT, 
		sku_id int NOT NULL DEFAULT '0' COMMENT '规格ID', 
		attr_id int NOT NULL DEFAULT '0' COMMENT '属性ID', 
		attr_value_id int NOT NULL DEFAULT '0' COMMENT '属性值ID',
		`created_at` datetime NULL DEFAULT NULL COMMENT '创建时间',
		`updated_at` datetime NULL DEFAULT NULL COMMENT '更新时间',
		PRIMARY KEY (id)
		) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci COMMENT='商品规格属性表'");
	print 'create table goods_sku_attr';
	// 订单表添加规格ID
	Mysql.Exec(db, "ALTER TABLE orders ADD COLUMN `sku_id` int NOT NULL DEFAULT '0' COMMENT '规格ID' AFTER gid");
	print 'add column sku_id to orders table';
	// 订单表添加规格名称
	Mysql.Exec(db, "ALTER TABLE orders ADD COLUMN `sku_name` varchar(255) NOT NULL DEFAULT '' COMMENT '规格名称' AFTER name");
	print 'add column sku_name to orders table';
	// 订单表添加规格属性信息
	Mysql.Exec(db, "ALTER TABLE orders ADD COLUMN `sku_attr_info` varchar(2048) NOT NULL DEFAULT '' COMMENT '规格属性信息' AFTER sku_name");
	print 'add column sku_attr_info to orders table';
endif

bltWriteFile(update_lock_file, config['version']);

print 'update table from ' + update_version + ' to ' + config['version'];

