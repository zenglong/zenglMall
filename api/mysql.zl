// Mysql数据库类，提供一些和Mysql数据库操作相关的方法
class Mysql
	con;
	error_tpl;
	debug;
	is_transaction;
	/** 
	 * 当操作数据库发生错误时，直接退出脚本，同时会返回500错误给客户端，所有的500错误对应的具体错误原因都会记录到zenglServer日志中，
	 * 如果使用了bltFatalErrorCallback模块函数设置过运行时错误回调函数的话，还会调用用户自定义的回调函数来处理错误信息
	 */
	fun error(obj, sql='')
		self obj;
		data['error'] = mysqlError(obj.con);
		if(obj.is_transaction)
			self.Rollback(obj);
		endif
		mysqlClose(obj.con);
		if(obj.error_tpl)
			data['title'] = 'Mysql错误';
			print bltMustacheFileRender(obj.error_tpl,data);
		endif
		bltExit(data['error'] + (sql ? ' sql: ' + sql : ''));
	endfun

	fun log(obj, sql)
		self obj;
		if(obj.debug)
			bltWriteFile('logs/sql_'+bltDate('%Y%m%d')+'.log', bltDate('%Y-%m-%d %H:%M:%S') + ' - ' + sql + '\n', DEFAULT_WRITE_LEN, APPEND_MODE);
		endif
	endfun

	// 初始化mysql数据库连接，并将mysql连接设置到obj的con成员中
	fun init(obj, config, error_tpl)
		self obj;
		obj.is_transaction = FALSE;
		obj.error_tpl = error_tpl;
		obj.debug = config['db_debug'];
		obj.con = mysqlInit();
		if(!mysqlRealConnect(obj.con, config['db_host'], config['db_user'], 
					config['db_passwd'], config['db_name'], config['db_port']))
			self.error(obj);
		endif
		if(mysqlSetCharacterSet(obj.con, "utf8"))
			self.error(obj);
		endif
	endfun

	// 根据sql语句执行查询操作，返回一条查询记录(返回数组的各成员对应该条查询记录的各个字段)
	fun fetchOne(obj, sql)
		self obj;
		self.Exec(obj, sql);
		result = mysqlStoreResult(obj.con);
		if(!mysqlFetchResultRow(result, &result_array))
			result_array = bltArray();
		endif
		mysqlFreeResult(result);
		return result_array;
	endfun

	// 根据sql语句执行查询操作，返回所有的查询记录(返回数组的每个成员都对应一条查询记录)
	fun fetchAll(obj, sql)
		self obj;
		self.Exec(obj, sql);
		result = mysqlStoreResult(obj.con);
		return_array = bltArray();
		while(mysqlFetchResultRow(result, &result_array))
			return_array[] = result_array;
		endwhile
		mysqlFreeResult(result);
		return return_array;
	endfun

	// 将str对应的语句进行mysql转义，让其可以安全的用于sql语句中(通常用于拼接sql语句时，需要执行转义操作)
	fun Escape(obj, str)
		self obj;
		return mysqlRealEscapeString(obj.con, bltStr(str));
	endfun

	// 将datas数组作为数据库记录(数组中的每个成员都对应记录中的一个字段，成员key对应字段的列名，成员的值对应字段的值)插入到table表中
	fun Insert(obj, table, datas)
		self obj;
		vals = keys = '';
		len = bltCount(datas);
		for(i=0,j=0;bltIterArray(datas,&i,&k,&v);)
			keys += "`" + self.Escape(obj, k) + "`";
			vals += "'" + self.Escape(obj, v) + "'";
			if(++j < len)
				keys += ',';
				vals += ',';
			endif
		endfor
		if(len > 0)
			sql = "INSERT INTO `"+table+"` (" + keys + ") VALUES (" + vals + ")";
			self.Exec(obj, sql);
		endif
	endfun

	// 将datas数组作为数据库记录(数组中的每个成员都对应记录中的一个字段，成员key对应字段的列名，成员的值对应字段的值)更新到table表中，
	// where表示更新条件，即通过sql的where语句来指定哪些数据库记录需要被更新
	fun Update(obj, table, datas, where = '')
		self obj;
		key_vals = '';
		len = bltCount(datas);
		for(i=0,j=0;bltIterArray(datas,&i,&k,&v);)
			key_vals += "`" + self.Escape(obj, k) + "`=" + "'" + self.Escape(obj, v) + "'";
			if(++j < len) key_vals += ','; endif
		endfor
		if(len > 0)
			sql = "UPDATE `"+table+"` SET " + key_vals + (where != '' ? ' WHERE ' + where : '');
			self.Exec(obj, sql);
		endif
	endfun

	// 执行原始的sql语句，脚本中也可以手动拼接原始的sql语句来执行相关的数据库操作(例如插入，更新之类的语句)
	fun Exec(obj, sql)
		self obj;
		self.log(obj, sql);
		if(mysqlQuery(obj.con, sql))
			self.error(obj);
		endif
	endfun

	// 通过START TRANSACTION语句开启数据库事务
	fun StartTransaction(obj)
		self obj;
		self.Exec(obj, "START TRANSACTION");
		obj.is_transaction = TRUE;
	endfun

	// 通过COMMIT语句提交事务
	fun Commit(obj)
		self obj;
		self.Exec(obj, "COMMIT");
		obj.is_transaction = FALSE;
	endfun

	// 通过ROLLBACK语句回滚事务，从而可以将事务中执行过的数据库操作撤销掉
	fun Rollback(obj)
		self obj;
		self.Exec(obj, "ROLLBACK");
		obj.is_transaction = FALSE;
	endfun

	// 获取上一次mysql操作所影响的记录数
	fun AffectedRows(obj)
		self obj;
		return mysqlAffectedRows(obj.con);
	endfun
endclass

