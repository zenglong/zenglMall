inc 'common.zl';
inc 'helper.zl';

querys = rqtGetQuery();
action = querys['act'] ? querys['act'] : 'index';
if(action == 'index')
	OrderList.index();
elif(action == 'view')
	OrderList.view(bltInt(querys['id']));
elif(action == 'modify_seller_remark')
	OrderList.modifySellerRemark();
elif(action == 'set_send_status')
	OrderList.setSendStatus();
else
	print 'invalid act';
endif

// 该类用于在后台管理页面，执行和订单相关的操作
class OrderList
	// 在管理后台，显示订单列表页面
	fun index()
		global querys;
		data['title'] = '订单列表:';
		data['csses', 0] = 'order_list.css?v=20200828';
		data['cur_menu'] = 'order_list.zl';
		db = init_db();
		where = " where 1 ";
		search_oid = bltStr(&querys['search_oid']);
		// 根据订单号搜索订单列表
		if(search_oid)
			where += ' and o.oid like "%' + Mysql.Escape(db, search_oid) + '%"';
			data['search_oid'] = search_oid;
		endif
		// 根据商品名称搜索订单列表
		search_name = bltStr(&querys['search_name']);
		if(search_name)
			where += ' and o.name like "%' + Mysql.Escape(db, search_name) + '%"';
			data['search_name'] = search_name;
		endif
		// 根据下单用户的用户名搜索订单列表
		search_username = bltStr(&querys['search_username']);
		if(search_username)
			where += ' and u.username like "%' + Mysql.Escape(db, search_username) + '%"';
			data['search_username'] = search_username;
		endif
		// 根据订单状态搜索订单列表
		search_status = bltStr(&querys['search_status']);
		if(search_status)
			where += ' and o.status = "' + Mysql.Escape(db, search_status) + '"';
			data['search_status'] = search_status;
		endif
		tmp = Mysql.fetchOne(db, "select count(1) as cnt from orders as o inner join users as u on u.id=o.uid " + where);
		total = bltInt(tmp['cnt']);
		page = get_page(10, total, 10);
		data['page'] = page;
		data['orders'] = Mysql.fetchAll(db, "select o.id,o.oid,o.name,o.thumbnail,o.amount,o.num,o.status,o.uid,u.username from orders as o inner join users as u on u.id=o.uid " + 
						where + " order by o.id desc limit " + page['offset'] + "," + page['limit']);
		data['datas'] = bltJsonEncode(data);
		print bltMustacheFileRender("tpl/order_list.tpl", data);
	endfun

	// 根据id(订单在orders订单表中的主键id)显示订单详情页面
	fun view(id)
		db = init_db();
		js = bltArray('ckeditor/ckeditor.js');
		data['head_js'] = js;
		data['order_info'] = Mysql.fetchOne(db, "select * from orders where id = " + id);
		data['title'] = '订单详情';
		data['cur_menu'] = 'order_list.zl';
		data['datas'] = bltJsonEncode(data);
		print bltMustacheFileRender("tpl/order_view.tpl", data);
	endfun

	// 设置订单的商家备注信息
	fun modifySellerRemark()
		posts = rqtGetBodyAsArray();
		data['seller_remark'] = bltStr(posts['seller_remark']);
		data['update_time'] = bltDate("%Y-%m-%d %H:%M:%S");
		Mysql.Update(init_db(), 'orders', data, 'id=' + bltInt(posts['id']));
		ajax_return();
	endfun

	// 将订单设置为待收货状态(也就是已发货状态)
	fun setSendStatus()
		posts = rqtGetBodyAsArray();
		id = bltInt(posts['id']);
		db = init_db();
		order_info = Mysql.fetchOne(db, "select * from orders where id = " + id);
		if(!bltCount(order_info))
			ajax_return('订单信息不存在');
		endif
		if(order_info['status'] != 'WAIT_SELLER_SEND')
			ajax_return('只能将待发货的订单设置为待收货状态');
		endif
		data['status'] = 'WAIT_BUYER_CONFIRM';
		data['send_time'] = data['update_time'] = bltDate("%Y-%m-%d %H:%M:%S");
		Mysql.Update(db, 'orders', data, 'id=' + id);
		ajax_return();
	endfun
endclass
