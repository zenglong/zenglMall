inc 'common.zl';
inc 'category_base.zl';

querys = rqtGetQuery();
action = querys['act'] ? querys['act'] : 'list';
if(action == 'list')
	Category.list();
elif(action == 'add')
	Category.add();
elif(action == 'edit')
	Category.edit();
else
	print 'invalid act';
endif

// 该类用于在后台管理页面，执行和商品分类相关的操作(例如显示商品分类列表，添加及编辑商品分类的操作)
class Category
	// 显示商品分类列表
	fun list()
		global querys;
		pid = querys['pid'] ? bltInt(querys['pid']) : 0;
		db = CategoryBase.initDB();
		data['title'] = '分类列表:';
		data['categories'] = CategoryBase.getListByPid(db, pid);
		if(pid > 0)
			data['category'] = CategoryBase.getCateInfo(db, pid);
			// 如果父分类中的childcnt字段的值，和实际读取出来的子分类的数量不一致的话，则更新父分类的childcnt值
			if(data['category', 'childcnt'] != bltCount(data['categories']))
				CategoryBase.updateChildCnt(db, pid);
			endif
		endif
		data['cur_menu'] = 'category.zl';
		data['pid'] = pid;
		data['datas'] = bltJsonEncode(data);
		print bltMustacheFileRender("tpl/category_list.tpl", data);
	endfun

	// 显示添加商品分类或编辑商品分类的页面
	fun showAdd(db, data, posts = 0, isadd = TRUE)
		csses[] = 'category_add.css';
		data['csses'] = csses;
		data['cur_menu'] = 'category.zl';
		data['title'] = isadd ? '添加分类' : '编辑分类';
		data['act'] = isadd ? 'add' : 'edit';
		if(posts && posts['pid'] > 0)
			data['category'] = CategoryBase.getCateInfo(db, bltInt(posts['pid']), "id,name");
		else
			data['categories'] = CategoryBase.getListByPid(db, 0, "id,name,childcnt");
		endif
		data['datas'] = bltJsonEncode(data);
		print bltMustacheFileRender("tpl/category_add.tpl",data);
	endfun

	// 对添加或编辑商品分类时，提交过来的数据进行校验
	fun validate(db, data, posts, isadd = TRUE)
		bltStr(&posts['name'], TRUE);
		bltStr(&posts['description'], TRUE);
		if(!posts['name'])
			data['err_msg'] = '分类名称不能为空';
		elif(!isadd && !posts['id'])
			data['err_msg'] = '无效的分类ID';
		endif
		if(data['err_msg'])
			data['posts'] = posts;
			if(posts['id'])
				data['id'] = posts['id'];
			endif
			Category.showAdd(db, data, posts, isadd);
			bltExit();
		endif
	endfun

	// 添加商品分类
	fun add()
		posts = rqtGetBodyAsArray();
		db = CategoryBase.initDB();
		if(posts['submit'])
			Category.validate(db, data, posts);
			bltUnset(&posts['submit']);
			Mysql.Insert(db, 'category', posts);
			CategoryBase.updateChildCnt(db, bltInt(posts['pid']));
			data['success_msg'] = '添加分类成功';
		endif
		Category.showAdd(db, data);
	endfun

	// 编辑商品分类
	fun edit()
		global querys;
		posts = rqtGetBodyAsArray();
		db = CategoryBase.initDB();
		if(posts['submit'])
			id = bltInt(posts['id']);
			Category.validate(db, data, posts, FALSE);
			oldinfo = CategoryBase.getCateInfo(db, id, "pid");
			bltUnset(&posts['submit']);
			Mysql.Update(db, 'category', posts, 'id=' + id);
			if(oldinfo['pid'] != bltInt(&posts['pid'], TRUE))
				CategoryBase.updateChildCnt(db, posts['pid']);
				CategoryBase.updateChildCnt(db, oldinfo['pid']);
			endif
			data['success_msg'] = '编辑分类成功';
		else
			id = bltInt(querys['id']);
		endif
		data['posts'] = CategoryBase.getCateInfo(db, id);
		if(!bltCount(data['posts']))
			data['err_msg'] = '无效的分类ID';
			id = 0;
		endif
		data['id'] = id;
		Category.showAdd(db, data, data['posts'], FALSE);
	endfun
endclass
