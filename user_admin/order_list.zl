inc '../common.zl';
inc '../user_sess.zl';
inc 'helper.zl';

querys = rqtGetQuery();
OrderList.act();

// OrderList类用于前台用户执行和订单相关的操作
class OrderList
	fun act()
		global querys;
		action = querys['act'] ? querys['act'] : 'index';
		if(action == 'index')
			self.index();
		elif(action == 'view')
			self.view(bltInt(querys['id']));
		elif(action == 'buyer_confirm')
			self.setBuyerConfirm();
		else
			print 'invalid act';
		endif
	endfun

	// 前台会员中心订单列表页面
	fun index()
		global querys, db, sess_data;
		header_data(&data, TRUE, &css);
		css[] = 'user_admin/order_list.css?v=20200826';
		where = " where uid = " + sess_data['uid'];
		search_oid = bltStr(&querys['search_oid']);
		// 根据订单号搜索订单列表
		if(search_oid)
			where += ' and oid like "%' + Mysql.Escape(db, search_oid) + '%"';
			data['search_oid'] = search_oid;
		endif
		search_name = bltStr(&querys['search_name']);
		// 根据商品名称搜索订单列表
		if(search_name)
			where += ' and name like "%' + Mysql.Escape(db, search_name) + '%"';
			data['search_name'] = search_name;
		endif
		search_status = bltStr(&querys['search_status']);
		// 根据订单状态搜索订单列表
		if(search_status)
			where += ' and status = "' + Mysql.Escape(db, search_status) + '"';
			data['search_status'] = search_status;
		endif
		tmp = Mysql.fetchOne(db, "select count(1) as cnt from orders " + where);
		total = bltInt(tmp['cnt']);
		page = get_page(10, total, 10);
		data['page'] = page;
		data['orders'] = Mysql.fetchAll(db, "select id,oid,name,thumbnail,amount,num,status from orders "+ where +
							" order by id desc limit " + page['offset'] + "," + page['limit']);
		data['title'] = '订单列表';
		data['cur_menu'] = 'order_list.zl';
		data['datas'] = bltJsonEncode(data);
		print bltMustacheFileRender("tpl/order_list.tpl", data);
	endfun

	// 前台会员中心订单详情页面
	fun view(id)
		global db, sess_data;
		header_data(&data, TRUE, &css);
		data['order_info'] = Mysql.fetchOne(db, "select * from orders where uid = " + sess_data['uid'] + " and id = " + id);
		data['title'] = '订单详情';
		data['cur_menu'] = 'order_list.zl';
		data['datas'] = bltJsonEncode(data);
		print bltMustacheFileRender("tpl/order_view.tpl", data);
	endfun

	// 对待收货的订单执行确认收货的操作，也就是将订单的状态设置为已收货状态
	fun setBuyerConfirm()
		global db, sess_data;
		posts = rqtGetBodyAsArray();
		id = bltInt(posts['id']);
		order_info = Mysql.fetchOne(db, "select * from orders where uid = " + sess_data['uid'] + " and id = " + id);
		if(!bltCount(order_info))
			ajax_return('订单信息不存在');
		endif
		if(order_info['status'] != 'WAIT_BUYER_CONFIRM')
			ajax_return('只能对待收货的订单进行确认收货');
		endif
		// 通过将订单在orders表中的数据库记录中的status字段的值设置为BUYER_CONFIRM，从而将订单设置为已收货状态
		data['status'] = 'BUYER_CONFIRM';
		data['confirm_time'] = data['update_time'] = bltDate("%Y-%m-%d %H:%M:%S");
		Mysql.Update(db, 'orders', data, 'id=' + id);
		ajax_return();
	endfun
endclass
